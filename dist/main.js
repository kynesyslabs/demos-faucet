class Y{remoteBackendUrl;FIXED_AMOUNT=10;constructor(){this.remoteBackendUrl=window.__BACKEND_URL__||"http://backend:3010",console.log("Using backend URL:",this.remoteBackendUrl),this.testBackendUrl(),this.init()}async testBackendUrl(){if(!this.remoteBackendUrl)console.error("REMOTE_BACKEND_URL is not set");console.log("Testing REMOTE_BACKEND_URL: "+this.remoteBackendUrl);let w=await fetch(`${this.remoteBackendUrl}/api/test`);if(w.status!==200)console.error("[ERROR] REMOTE_BACKEND_URL is not working: things won't work.");else{let z=await w.text();console.log("REMOTE_BACKEND_URL is working: "+z)}}async init(){await this.updateFaucetStatus(),setInterval(()=>{this.updateFaucetStatus()},30000);let w=document.getElementById("faucet-form");if(w)w.addEventListener("submit",(z)=>{z.preventDefault();let j=document.getElementById("wallet-address");if(!j.value){this.showError("Please enter a wallet address");return}this.requestTokens(j.value,this.FIXED_AMOUNT)})}async updateFaucetStatus(){let w=document.getElementById("faucet-address"),z=document.getElementById("faucet-balance"),j=document.getElementById("connection-status");try{if(console.log("Fetching faucet status from:",`${this.remoteBackendUrl}/api/balance`),j)j.textContent="Fetching...",j.className="status-value fetching";let G=await fetch(`${this.remoteBackendUrl}/api/balance`);if(G.ok){let J=await G.json();if(console.log("Faucet status response:",JSON.stringify(J,null,2)),j)j.textContent="Connected",j.className="status-value connected";if(J.body&&J.body.publicKey&&w){let L=J.body.publicKey,Q=L.substring(0,5)+"..."+L.substring(L.length-5);w.innerHTML=`<span class="clickable-address" title="Click to copy full address" data-address="${L}">${Q}</span>`;let K=w.querySelector(".clickable-address");if(K)K.addEventListener("click",()=>{navigator.clipboard.writeText(L).then(()=>{console.log("Address copied to clipboard:",L);let N=K.textContent;K.textContent="Copied!",setTimeout(()=>{K.textContent=N},1000)}).catch((N)=>{console.error("Failed to copy address:",N)})})}if(J.body&&J.body.balance&&z){let L=J.body.balance;if(console.log("Faucet balance:",L),z.textContent=L,Number(L)<1000000000000000000)z.className="status-value low-balance";else z.className="status-value"}}else{let J=await G.text();if(console.error("Failed to fetch faucet status:",G.status,J),j)j.textContent="Error",j.className="status-value error";if(z)z.textContent="Unavailable";if(w)w.textContent="Unavailable"}}catch(G){if(console.error("Error fetching faucet status:",G),j)j.textContent="Offline",j.className="status-value offline";if(z)z.textContent="Connection error";if(w)w.textContent="Connection error"}}showError(w){let z=document.getElementById("message-container"),j=z?.querySelector(".message-card"),G=document.getElementById("message-content");if(z&&j&&G)j.classList.remove("success"),j.classList.add("error"),G.innerHTML=w,z.classList.remove("hidden")}showSuccess(w){let z=document.getElementById("message-container"),j=z?.querySelector(".message-card"),G=document.getElementById("message-content");if(z&&j&&G)j.classList.remove("error"),j.classList.add("success"),G.innerHTML=w,z.classList.remove("hidden")}async getBalance(w){}async requestTokens(w,z){let j=document.querySelector(".request-button"),G=j.querySelector(".button-text"),J=document.getElementById("message-container"),L=J?.querySelector(".message-card"),Q=document.getElementById("message-content");if(j&&G&&J&&L&&Q){j.classList.add("loading"),G.innerHTML='<span class="spinner"></span>Processing...',J.classList.add("hidden");try{let K=new AbortController,N=setTimeout(()=>K.abort(),30000),V={address:w,amount:z};console.log("Sending request to backend:",{url:`${this.remoteBackendUrl}/api/request`,body:V});let R=await fetch(`${this.remoteBackendUrl}/api/request`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(V),signal:K.signal});clearTimeout(N);let P=await R.json();if(!R.ok){if(P.body.includes("exceeds maximum allowed amount"))this.showError("Requested amount exceeds the maximum allowed limit");else if(P.body.includes("maximum number of requests"))this.showError("You have reached the maximum number of requests for this time period");else if(P.body.includes("would exceed the maximum amount limit"))this.showError("This request would exceed your total amount limit for this time period");else this.showError(P.body||`Server returned ${R.status}`);throw new Error(P.body||`Server returned ${R.status}`)}let U=document.getElementById("transaction-info"),W=document.getElementById("tx-hash"),X=document.getElementById("confirmation-block");if(U&&W&&X)W.innerHTML=`<a href="https://explorer.demos.sh/transactions/${P.body.txHash}" target="_blank" rel="noopener noreferrer">${P.body.txHash}</a>`,X.textContent=P.body.confirmationBlock.toString(),U.classList.remove("hidden");this.showSuccess("Tokens requested successfully!"),await this.updateFaucetStatus(),G.textContent="Success!",setTimeout(()=>{if(G.textContent="Request Tokens",j.classList.remove("loading"),J.classList.add("hidden"),U)U.classList.add("hidden")},1e4)}catch(K){let N="Error - Try Again";if(K instanceof Error)if(K.name==="AbortError")N="Request timed out";else if(K.message.includes("Failed to fetch"))N="Network error - Check connection";else N=K.message;this.showError(N),G.textContent=N,j.classList.remove("loading"),console.error("Error requesting tokens:",K)}}}async getTransactionHistory(w){}async getTransactionStatus(w){}}new Y;
